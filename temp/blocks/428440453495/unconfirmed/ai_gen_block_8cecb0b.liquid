{% doc %}
  @prompt
    Create a product section where the customer can select 2 shades of the same product using existing product variants.
    
    üü¢ Functionality:
    ‚Ä¢ Show two dropdowns or swatches: ‚Äú1. √°rnyalat kiv√°laszt√°sa‚Äù and ‚Äú2. √°rnyalat kiv√°laszt√°sa‚Äù
    ‚Ä¢ Use only the product‚Äôs real variants (colors)
    ‚Ä¢ When a color is selected, show only images linked to that variant
    ‚Ä¢ Add both shades to cart as separate items
    ‚Ä¢ After clicking ‚ÄúKos√°rba‚Äù, redirect to /cart (no popup, no refresh)
    
    üü¢ Add-ons:
    ‚Ä¢ Show optional add-on cards (image + name + price + checkbox)
    ‚Ä¢ Add selected add-ons to cart together with shades
    
    üü¢ Design:
    ‚Ä¢ Desktop: 2-column layout (image left, selectors right)
    ‚Ä¢ Mobile: vertical stack, big touch-friendly swatches
    ‚Ä¢ All texts in Hungarian
    ‚Ä¢ Button: full-width, green, labeled ‚ÄúKos√°rba‚Äù
    
    üü¢ Notes:
    ‚Ä¢ Use Shopify‚Äôs native variant images and options
    ‚Ä¢ Hide out-of-stock variants automatically

{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-dual-shade-selector-{{ ai_gen_id }} {
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
  }

  .ai-dual-shade-content-{{ ai_gen_id }} {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 40px;
    align-items: start;
  }

  .ai-dual-shade-images-{{ ai_gen_id }} {
    position: sticky;
    top: 20px;
  }

  .ai-dual-shade-image-container-{{ ai_gen_id }} {
    position: relative;
    width: 100%;
    margin-bottom: 20px;
  }

  .ai-dual-shade-image-container-{{ ai_gen_id }} img {
    width: 100%;
    height: auto;
    border-radius: {{ block.settings.image_border_radius }}px;
  }

  .ai-dual-shade-image-placeholder-{{ ai_gen_id }} {
    width: 100%;
    aspect-ratio: 1;
    background-color: #f4f4f4;
    border-radius: {{ block.settings.image_border_radius }}px;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .ai-dual-shade-image-placeholder-{{ ai_gen_id }} svg {
    width: 60%;
    height: 60%;
    opacity: 0.3;
  }

  .ai-dual-shade-selector-section-{{ ai_gen_id }} {
    background: {{ block.settings.selector_background }};
    padding: 30px;
    border-radius: {{ block.settings.section_border_radius }}px;
    margin-bottom: 20px;
  }

  .ai-dual-shade-selector-title-{{ ai_gen_id }} {
    font-size: 18px;
    font-weight: 600;
    color: {{ block.settings.text_color }};
    margin: 0 0 15px 0;
  }

  .ai-dual-shade-variant-grid-{{ ai_gen_id }} {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(60px, 1fr));
    gap: 12px;
    margin-bottom: 15px;
  }

  .ai-dual-shade-variant-option-{{ ai_gen_id }} {
    position: relative;
    cursor: pointer;
  }

  .ai-dual-shade-variant-option-{{ ai_gen_id }}.disabled {
    cursor: not-allowed;
    opacity: 0.3;
  }

  .ai-dual-shade-variant-swatch-{{ ai_gen_id }} {
    width: 60px;
    height: 60px;
    border-radius: 50%;
    border: 3px solid transparent;
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
  }

  .ai-dual-shade-variant-option-{{ ai_gen_id }}.selected .ai-dual-shade-variant-swatch-{{ ai_gen_id }} {
    border-color: {{ block.settings.selected_border_color }};
    transform: scale(1.1);
  }

  .ai-dual-shade-variant-swatch-{{ ai_gen_id }} img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .ai-dual-shade-variant-name-{{ ai_gen_id }} {
    text-align: center;
    font-size: 12px;
    margin-top: 8px;
    color: {{ block.settings.text_color }};
  }

  .ai-dual-shade-selected-info-{{ ai_gen_id }} {
    padding: 15px;
    background: {{ block.settings.info_background }};
    border-radius: 8px;
    margin-bottom: 20px;
    display: none;
  }

  .ai-dual-shade-selected-info-{{ ai_gen_id }}.visible {
    display: block;
  }

  .ai-dual-shade-selected-name-{{ ai_gen_id }} {
    font-weight: 600;
    color: {{ block.settings.text_color }};
    margin-bottom: 5px;
  }

  .ai-dual-shade-selected-price-{{ ai_gen_id }} {
    color: {{ block.settings.price_color }};
    font-size: 16px;
  }

  .ai-dual-shade-addons-{{ ai_gen_id }} {
    background: {{ block.settings.addon_background }};
    padding: 30px;
    border-radius: {{ block.settings.section_border_radius }}px;
    margin-bottom: 30px;
  }

  .ai-dual-shade-addons-title-{{ ai_gen_id }} {
    font-size: 18px;
    font-weight: 600;
    color: {{ block.settings.text_color }};
    margin: 0 0 20px 0;
  }

  .ai-dual-shade-addon-grid-{{ ai_gen_id }} {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 15px;
  }

  .ai-dual-shade-addon-card-{{ ai_gen_id }} {
    border: 2px solid transparent;
    border-radius: 12px;
    padding: 15px;
    background: {{ block.settings.card_background }};
    cursor: pointer;
    transition: all 0.3s ease;
    position: relative;
  }

  .ai-dual-shade-addon-card-{{ ai_gen_id }}:hover {
    border-color: {{ block.settings.hover_border_color }};
  }

  .ai-dual-shade-addon-card-{{ ai_gen_id }}.selected {
    border-color: {{ block.settings.selected_border_color }};
    background: {{ block.settings.selected_background }};
  }

  .ai-dual-shade-addon-image-{{ ai_gen_id }} {
    width: 100%;
    height: 120px;
    object-fit: cover;
    border-radius: 8px;
    margin-bottom: 10px;
  }

  .ai-dual-shade-addon-image-placeholder-{{ ai_gen_id }} {
    width: 100%;
    height: 120px;
    background-color: #f4f4f4;
    border-radius: 8px;
    margin-bottom: 10px;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .ai-dual-shade-addon-image-placeholder-{{ ai_gen_id }} svg {
    width: 40%;
    height: 40%;
    opacity: 0.3;
  }

  .ai-dual-shade-addon-name-{{ ai_gen_id }} {
    font-weight: 600;
    color: {{ block.settings.text_color }};
    margin-bottom: 5px;
  }

  .ai-dual-shade-addon-price-{{ ai_gen_id }} {
    color: {{ block.settings.price_color }};
    font-size: 14px;
  }

  .ai-dual-shade-addon-checkbox-{{ ai_gen_id }} {
    position: absolute;
    top: 10px;
    right: 10px;
    width: 20px;
    height: 20px;
  }

  .ai-dual-shade-summary-{{ ai_gen_id }} {
    background: {{ block.settings.summary_background }};
    padding: 25px;
    border-radius: {{ block.settings.section_border_radius }}px;
    margin-bottom: 20px;
  }

  .ai-dual-shade-summary-title-{{ ai_gen_id }} {
    font-size: 18px;
    font-weight: 600;
    color: {{ block.settings.text_color }};
    margin: 0 0 15px 0;
  }

  .ai-dual-shade-summary-item-{{ ai_gen_id }} {
    display: flex;
    justify-content: space-between;
    margin-bottom: 8px;
    color: {{ block.settings.text_color }};
  }

  .ai-dual-shade-summary-total-{{ ai_gen_id }} {
    display: flex;
    justify-content: space-between;
    font-weight: 600;
    font-size: 18px;
    color: {{ block.settings.text_color }};border-top: 1px solid #e0e0e0;
    padding-top: 15px;
    margin-top: 15px;
  }

  .ai-dual-shade-add-to-cart-{{ ai_gen_id }} {
    width: 100%;
    padding: 18px;
    background-color: {{ block.settings.button_color }};
    color: {{ block.settings.button_text_color }};
    border: none;
    border-radius: {{ block.settings.button_border_radius }}px;
    font-size: 18px;
    font-weight: 600;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }

  .ai-dual-shade-add-to-cart-{{ ai_gen_id }}:hover {
    background-color: {{ block.settings.button_hover_color }};
  }

  .ai-dual-shade-add-to-cart-{{ ai_gen_id }}:disabled {
    background-color: #ccc;
    cursor: not-allowed;
  }

  .ai-dual-shade-error-{{ ai_gen_id }} {
    color: {{ block.settings.error_color }};
    font-size: 14px;
    margin-top: 10px;
    display: none;
  }

  @media screen and (max-width: 768px) {
    .ai-dual-shade-content-{{ ai_gen_id }} {
      grid-template-columns: 1fr;
      gap: 20px;
    }

    .ai-dual-shade-images-{{ ai_gen_id }} {
      position: static;
    }

    .ai-dual-shade-variant-grid-{{ ai_gen_id }} {
      grid-template-columns: repeat(auto-fit, minmax(80px, 1fr));
    }

    .ai-dual-shade-variant-swatch-{{ ai_gen_id }} {
      width: 80px;
      height: 80px;
    }

    .ai-dual-shade-addon-grid-{{ ai_gen_id }} {
      grid-template-columns: 1fr;
    }

    .ai-dual-shade-selector-section-{{ ai_gen_id }},
    .ai-dual-shade-addons-{{ ai_gen_id }},
    .ai-dual-shade-summary-{{ ai_gen_id }} {
      padding: 20px;
    }
  }
{% endstyle %}

<dual-shade-selector-{{ ai_gen_id }}
  class="ai-dual-shade-selector-{{ ai_gen_id }}"
  data-product-id="{{ block.settings.product.id }}"
  {{ block.shopify_attributes }}
>
  {% if block.settings.product %}
    <div class="ai-dual-shade-content-{{ ai_gen_id }}">
      <div class="ai-dual-shade-images-{{ ai_gen_id }}">
        <div class="ai-dual-shade-image-container-{{ ai_gen_id }}">
          {% if block.settings.product.featured_image %}
            <img
              src="{{ block.settings.product.featured_image | image_url: width: 600 }}"
              alt="{{ block.settings.product.featured_image.alt | escape }}"
              class="ai-dual-shade-main-image-{{ ai_gen_id }}"
              loading="lazy"
            >
          {% else %}
            <div class="ai-dual-shade-image-placeholder-{{ ai_gen_id }}">
              {{ 'product-1' | placeholder_svg_tag }}
            </div>
          {% endif %}
        </div>
      </div>

      <div class="ai-dual-shade-selectors-{{ ai_gen_id }}">
        <div class="ai-dual-shade-selector-section-{{ ai_gen_id }}">
          <h3 class="ai-dual-shade-selector-title-{{ ai_gen_id }}">1. √°rnyalat kiv√°laszt√°sa</h3>
          <div class="ai-dual-shade-variant-grid-{{ ai_gen_id }}" data-shade="1">
            {% for variant in block.settings.product.variants %}
              {% if variant.available %}
                <div
                  class="ai-dual-shade-variant-option-{{ ai_gen_id }}"
                  data-variant-id="{{ variant.id }}"
                  data-variant-price="{{ variant.price }}"
                  data-variant-title="{{ variant.title | escape }}"
                  data-variant-image="{% if variant.featured_image %}{{ variant.featured_image | image_url: width: 600 }}{% endif %}"
                >
                  <div class="ai-dual-shade-variant-swatch-{{ ai_gen_id }}">
                    {% if variant.featured_image %}
                      <img
                        src="{{ variant.featured_image | image_url: width: 100 }}"
                        alt="{{ variant.title | escape }}"
                        loading="lazy"
                      >
                    {% else %}
                      <div style="background-color: {{ variant.option1 | handle | replace: '-', '' }}; width: 100%; height: 100%;"></div>
                    {% endif %}
                  </div>
                  <div class="ai-dual-shade-variant-name-{{ ai_gen_id }}">{{ variant.title }}</div>
                </div>
              {% endif %}
            {% endfor %}
          </div>
          <div class="ai-dual-shade-selected-info-{{ ai_gen_id }}" data-shade="1">
            <div class="ai-dual-shade-selected-name-{{ ai_gen_id }}"></div>
            <div class="ai-dual-shade-selected-price-{{ ai_gen_id }}"></div>
          </div>
        </div>

        <div class="ai-dual-shade-selector-section-{{ ai_gen_id }}">
          <h3 class="ai-dual-shade-selector-title-{{ ai_gen_id }}">2. √°rnyalat kiv√°laszt√°sa</h3>
          <div class="ai-dual-shade-variant-grid-{{ ai_gen_id }}" data-shade="2">
            {% for variant in block.settings.product.variants %}
              {% if variant.available %}
                <div
                  class="ai-dual-shade-variant-option-{{ ai_gen_id }}"
                  data-variant-id="{{ variant.id }}"
                  data-variant-price="{{ variant.price }}"
                  data-variant-title="{{ variant.title | escape }}"
                  data-variant-image="{% if variant.featured_image %}{{ variant.featured_image | image_url: width: 600 }}{% endif %}"
                >
                  <div class="ai-dual-shade-variant-swatch-{{ ai_gen_id }}">
                    {% if variant.featured_image %}
                      <img
                        src="{{ variant.featured_image | image_url: width: 100 }}"
                        alt="{{ variant.title | escape }}"
                        loading="lazy"
                      >
                    {% else %}
                      <div style="background-color: {{ variant.option1 | handle | replace: '-', '' }}; width: 100%; height: 100%;"></div>
                    {% endif %}
                  </div>
                  <div class="ai-dual-shade-variant-name-{{ ai_gen_id }}">{{ variant.title }}</div>
                </div>
              {% endif %}
            {% endfor %}
          </div>
          <div class="ai-dual-shade-selected-info-{{ ai_gen_id }}" data-shade="2">
            <div class="ai-dual-shade-selected-name-{{ ai_gen_id }}"></div>
            <div class="ai-dual-shade-selected-price-{{ ai_gen_id }}"></div>
          </div>
        </div>

        {% if block.settings.show_addons %}
          <div class="ai-dual-shade-addons-{{ ai_gen_id }}">
            <h3 class="ai-dual-shade-addons-title-{{ ai_gen_id }}">Kieg√©sz√≠t≈ëk</h3>
            <div class="ai-dual-shade-addon-grid-{{ ai_gen_id }}">
              {% for i in (1..3) %}
                {% assign addon_product_key = 'addon_product_' | append: i %}
                {% assign addon_product = block.settings[addon_product_key] %}
                {% if addon_product %}
                  <div
                    class="ai-dual-shade-addon-card-{{ ai_gen_id }}"
                    data-addon-id="{{ addon_product.id }}"
                    data-addon-price="{{ addon_product.price }}"
                    data-addon-title="{{ addon_product.title | escape }}">
                    <input
                      type="checkbox"
                      class="ai-dual-shade-addon-checkbox-{{ ai_gen_id }}"
                      data-addon-id="{{ addon_product.id }}"
                    >
                    {% if addon_product.featured_image %}
                      <img
                        src="{{ addon_product.featured_image | image_url: width: 200 }}"
                        alt="{{ addon_product.title | escape }}"
                        class="ai-dual-shade-addon-image-{{ ai_gen_id }}"
                        loading="lazy"
                      >
                    {% else %}
                      <div class="ai-dual-shade-addon-image-placeholder-{{ ai_gen_id }}">
                        {{ 'product-1' | placeholder_svg_tag }}
                      </div>
                    {% endif %}
                    <div class="ai-dual-shade-addon-name-{{ ai_gen_id }}">{{ addon_product.title }}</div>
                    <div class="ai-dual-shade-addon-price-{{ ai_gen_id }}">{{ addon_product.price | money }}</div>
                  </div>
                {% endif %}
              {% endfor %}
            </div>
          </div>
        {% endif %}

        <div class="ai-dual-shade-summary-{{ ai_gen_id }}">
          <h3 class="ai-dual-shade-summary-title-{{ ai_gen_id }}">√ñsszes√≠t≈ë</h3>
          <div class="ai-dual-shade-summary-items-{{ ai_gen_id }}"></div>
          <div class="ai-dual-shade-summary-total-{{ ai_gen_id }}">
            <span>√ñsszesen:</span>
            <span class="ai-dual-shade-total-price-{{ ai_gen_id }}">0 Ft</span>
          </div>
        </div>

        <button
          type="button"
          class="ai-dual-shade-add-to-cart-{{ ai_gen_id }}"
          disabled
        >
          Kos√°rba
        </button>

        <div class="ai-dual-shade-error-{{ ai_gen_id }}"></div>
      </div>
    </div>
  {% else %}
    <div class="ai-dual-shade-image-placeholder-{{ ai_gen_id }}">
      {{ 'product-1' | placeholder_svg_tag }}
      <div style="position: absolute; bottom: 20px; left: 50%; transform: translateX(-50%); color: #666; font-size: 14px;">
        V√°lassz ki egy term√©ket
      </div>
    </div>
  {% endif %}
</dual-shade-selector-{{ ai_gen_id }}>

<script>
(function() {
  class DualShadeSelector{{ ai_gen_id }} extends HTMLElement {
    constructor() {
      super();
      this.selectedShades = {};
      this.selectedAddons = [];
      this.productId = this.dataset.productId;
    }

    connectedCallback() {
      this.setupEventListeners();
      this.updateUI();
    }

    setupEventListeners() {
      this.querySelectorAll('.ai-dual-shade-variant-option-{{ ai_gen_id }}').forEach(option => {
        option.addEventListener('click', (e) => this.handleVariantSelection(e));
      });

      this.querySelectorAll('.ai-dual-shade-addon-card-{{ ai_gen_id }}').forEach(card => {
        card.addEventListener('click', (e) => this.handleAddonSelection(e));
      });

      this.querySelector('.ai-dual-shade-add-to-cart-{{ ai_gen_id }}')?.addEventListener('click', () => {
        this.addToCart();
      });
    }

    handleVariantSelection(e) {
      const option = e.currentTarget;
      const shade = option.closest('[data-shade]').dataset.shade;
      const variantId = option.dataset.variantId;
      const variantPrice = parseInt(option.dataset.variantPrice);
      const variantTitle = option.dataset.variantTitle;
      const variantImage = option.dataset.variantImage;

      option.closest('[data-shade]').querySelectorAll('.ai-dual-shade-variant-option-{{ ai_gen_id }}').forEach(opt => {
        opt.classList.remove('selected');
      });
      option.classList.add('selected');

      this.selectedShades[shade] = {
        id: variantId,
        price: variantPrice,
        title: variantTitle,
        image: variantImage
      };

      this.updateSelectedInfo(shade);
      this.updateMainImage();
      this.updateSummary();
      this.updateAddToCartButton();
    }

    handleAddonSelection(e) {
      if (e.target.type === 'checkbox') return;

      const card = e.currentTarget;
      const checkbox = card.querySelector('.ai-dual-shade-addon-checkbox-{{ ai_gen_id }}');
      const addonId = card.dataset.addonId;
      const addonPrice = parseInt(card.dataset.addonPrice);
      const addonTitle = card.dataset.addonTitle;

      checkbox.checked = !checkbox.checked;
      card.classList.toggle('selected', checkbox.checked);

      if (checkbox.checked) {
        this.selectedAddons.push({
          id: addonId,
          price: addonPrice,
          title: addonTitle
        });
      } else {
        this.selectedAddons = this.selectedAddons.filter(addon => addon.id !== addonId);
      }

      this.updateSummary();
    }

    updateSelectedInfo(shade) {
      const info = this.querySelector(`[data-shade="${shade}"] .ai-dual-shade-selected-info-{{ ai_gen_id }}`);
      const selectedShade = this.selectedShades[shade];

      if (selectedShade && info) {
        info.classList.add('visible');
        info.querySelector('.ai-dual-shade-selected-name-{{ ai_gen_id }}').textContent = selectedShade.title;
        info.querySelector('.ai-dual-shade-selected-price-{{ ai_gen_id }}').textContent = this.formatPrice(selectedShade.price);
      }
    }

    updateMainImage() {
      const mainImage = this.querySelector('.ai-dual-shade-main-image-{{ ai_gen_id }}');
      if (!mainImage) return;

      const shade1 = this.selectedShades['1'];
      const shade2 = this.selectedShades['2'];

      if (shade1 && shade1.image) {
        mainImage.src = shade1.image;
      } else if (shade2 && shade2.image) {
        mainImage.src = shade2.image;
      }
    }

    updateSummary() {
      const summaryItems = this.querySelector('.ai-dual-shade-summary-items-{{ ai_gen_id }}');
      const totalPrice = this.querySelector('.ai-dual-shade-total-price-{{ ai_gen_id }}');
      
      if (!summaryItems || !totalPrice) return;

      let html = '';
      let total = 0;

      Object.values(this.selectedShades).forEach(shade => {
        html += `<div class="ai-dual-shade-summary-item-{{ ai_gen_id }}">
          <span>${shade.title}</span>
          <span>${this.formatPrice(shade.price)}</span>
        </div>`;
        total += shade.price;
      });

      this.selectedAddons.forEach(addon => {
        html += `<div class="ai-dual-shade-summary-item-{{ ai_gen_id }}">
          <span>${addon.title}</span>
          <span>${this.formatPrice(addon.price)}</span>
        </div>`;
        total += addon.price;
      });

      summaryItems.innerHTML = html;
      totalPrice.textContent = this.formatPrice(total);
    }

    updateAddToCartButton() {
      const button = this.querySelector('.ai-dual-shade-add-to-cart-{{ ai_gen_id }}');
      const hasShade1 = this.selectedShades['1'];
      const hasShade2 = this.selectedShades['2'];

      if (button) {
        button.disabled = !hasShade1 || !hasShade2;
      }
    }

    async addToCart() {
      const button = this.querySelector('.ai-dual-shade-add-to-cart-{{ ai_gen_id }}');
      const errorDiv = this.querySelector('.ai-dual-shade-error-{{ ai_gen_id }}');

      if (!button || button.disabled) return;

      button.disabled = true;
      button.textContent = 'Hozz√°ad√°s...';
      errorDiv.style.display = 'none';

      try {
        const items = [];

        Object.values(this.selectedShades).forEach(shade => {
          items.push({
            id: shade.id,
            quantity: 1
          });
        });

        this.selectedAddons.forEach(addon => {
          items.push({
            id: addon.id,
            quantity: 1
          });
        });

        const response = await fetch('/cart/add.js', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ items })
        });

        if (response.ok) {
          window.location.href = '/cart';
        } else {
          throw new Error('Hiba t√∂rt√©nt a kos√°rba helyez√©s sor√°n');
        }
      } catch (error) {
        errorDiv.textContent = error.message;
        errorDiv.style.display = 'block';
        button.disabled = false;
        button.textContent = 'Kos√°rba';
      }
    }

    formatPrice(price) {
      return new Intl.NumberFormat('hu-HU', {
        style: 'currency',
        currency: 'HUF',
        minimumFractionDigits: 0
      }).format(price / 100);
    }

    updateUI() {
      this.updateSummary();
      this.updateAddToCartButton();
    }
  }

  customElements.define('dual-shade-selector-{{ ai_gen_id }}', DualShadeSelector{{ ai_gen_id }});
})();
</script>

{% schema %}
{
  "name": "Dual shade selector",
  "settings": [
    {
      "type": "header",
      "content": "Product"
    },
    {
      "type": "product",
      "id": "product",
      "label": "Product"
    },
    {
      "type": "header",
      "content": "Add-ons"
    },
    {
      "type": "checkbox",
      "id": "show_addons",
      "label": "Show add-ons",
      "default": true
    },
    {
      "type": "product",
      "id": "addon_product_1",
      "label": "Add-on product 1"
    },
    {
      "type": "product",
      "id": "addon_product_2",
      "label": "Add-on product 2"
    },
    {
      "type": "product",
      "id": "addon_product_3",
      "label": "Add-on product 3"
    },
    {
      "type": "header",
      "content": "Colors"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Text color",
      "default": "#1a1a1a"
    },
    {
      "type": "color",
      "id": "price_color",
      "label": "Price color",
      "default": "#2c5530"
    },
    {
      "type": "color",
      "id": "selected_border_color",
      "label": "Selected border color",
      "default": "#2c5530"
    },
    {
      "type": "color",
      "id": "hover_border_color",
      "label": "Hover border color",
      "default": "#cccccc"
    },
    {
      "type": "color",
      "id": "error_color",
      "label": "Error color",
      "default": "#d82c0d"
    },
    {
      "type": "header",
      "content": "Backgrounds"
    },
    {
      "type": "color",
      "id": "selector_background",
      "label": "Selector background",
      "default": "#f8f8f8"
    },
    {
      "type": "color",
      "id": "info_background",
      "label": "Info background",
      "default": "#e8f5e8"
    },
    {
      "type": "color",
      "id": "addon_background",
      "label": "Add-on background",
      "default": "#f8f8f8"
    },
    {
      "type": "color",
      "id": "card_background",
      "label": "Card background",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "selected_background",
      "label": "Selected background",
      "default": "#e8f5e8"
    },
    {
      "type": "color",
      "id": "summary_background",
      "label": "Summary background",
      "default": "#f0f0f0"
    },
    {
      "type": "header",
      "content": "Button"
    },
    {
      "type": "color",
      "id": "button_color",
      "label": "Button color",
      "default": "#2c5530"
    },
    {
      "type": "color",
      "id": "button_text_color",
      "label": "Button text color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "button_hover_color",
      "label": "Button hover color",
      "default": "#1e3a21"
    },
    {
      "type": "header",
      "content": "Border radius"
    },
    {
      "type": "range",
      "id": "image_border_radius",
      "min": 0,
      "max": 20,
      "step": 2,
      "unit": "px",
      "label": "Image border radius",
      "default": 8
    },
    {
      "type": "range",
      "id": "section_border_radius",
      "min": 0,
      "max": 20,
      "step": 2,
      "unit": "px",
      "label": "Section border radius",
      "default": 12
    },
    {
      "type": "range",
      "id": "button_border_radius",
      "min": 0,
      "max": 30,
      "step": 2,
      "unit": "px",
      "label": "Button border radius",
      "default": 8
    }
  ],
  "presets": [
    {
      "name": "Dual shade selector"
    }
  ]
}
{% endschema %}